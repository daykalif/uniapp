{"version":3,"names":["Utils","_classCallCheck2","baseUrl","_createClass2","key","value","getUserInfo","_this","common_vendor","index","login","success","res","__f__","request","url","method","data","code","isShowLoading","res2","fail","err","options","arguments","length","undefined","showLoadingFun","option","header","response","hideLoading","isLoading","getStorageSync","setStorageSync","showLoading","title","complete","Utils$1"],"sources":["utils.js"],"sourcesContent":["class Utils {\r\n\tconstructor() {\r\n\t\t// this.baseUrl = 'http://159.75.169.224:7300/pz'\r\n\t\tthis.baseUrl = 'https://code.itndedu.com/pz'\r\n\t}\r\n\r\n\t// 获取用户信息\r\n\tgetUserInfo() {\r\n\t\t// 调用登录的api\r\n\t\tuni.login({\r\n\t\t\tsuccess: (res) => {\r\n\t\t\t\tconsole.log('调用登录的api==>', res);\r\n\r\n\t\t\t\tthis.request({\r\n\t\t\t\t\turl: '/auth/wxLogin',\r\n\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tcode: res.code\r\n\t\t\t\t\t},\r\n\t\t\t\t\tisShowLoading: true,\r\n\t\t\t\t\tsuccess: (res) => {\r\n\t\t\t\t\t\tconsole.log(res, 'request res');\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfail: (err) => {\r\n\t\t\t\t\t\tconsole.log(err, 'request err');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\r\n\t\t\t\tthis.request({\r\n\t\t\t\t\turl: '/auth/wxLogin',\r\n\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tcode: res.code\r\n\t\t\t\t\t},\r\n\t\t\t\t\tisShowLoading: true,\r\n\t\t\t\t\tsuccess: (res) => {\r\n\t\t\t\t\t\tconsole.log(res, 'request res');\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfail: (err) => {\r\n\t\t\t\t\t\tconsole.log(err, 'request err');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t})\r\n\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* 调用说明：\r\n\t* 当同时存在 2 个请求发起，且 isShowLoading 都为 true 时，下面详细描述代码的执行顺序：\r\n\t\t前提条件\r\n\t\t\t代码运行在 uni-app 框架中，使用 uni.getStorageSync 和 uni.setStorageSync 进行本地存储操作，uni.showLoading 和 uni.hideLoading 用于显示和隐藏加载动画。\r\n\t\t\t初始状态下，本地存储中 isShowLoading 的值为 false。\r\n\t\t\r\n\t\t执行顺序步骤\r\n\t\t\r\n\t\t\t第一个请求发起\r\n\t\t\t\t调用 request 方法：\r\n\t\t\t\t\t传入的 options 中 isShowLoading 为 true，并且 options.url 存在（假设满足条件）。\r\n\t\t\t\t\t由于 options.isShowLoading 为 true，调用 this.showLoadingFun() 方法。\r\n\t\t\t\t\t执行 showLoadingFun 方法：\r\n\t\t\t\t\t通过 uni.getStorageSync('isShowLoading') 获取本地存储的值，此时为 false，所以不会执行隐藏加载动画的逻辑。\r\n\t\t\t\t\t调用 uni.showLoading 显示加载动画，设置 title 为 “加载中...”。\r\n\t\t\t\t\tuni.showLoading 执行完成后，触发 complete 回调，在回调中使用 uni.setStorageSync('isShowLoading', true) 将本地存储中的 isShowLoading 设置为 true，表示加载动画正在显示。\r\n\t\t\t第二个请求发起\r\n\t\t\t\t调用 request 方法：\r\n\t\t\t\t\t同样传入的 options 中 isShowLoading 为 true，且 options.url 存在。\r\n\t\t\t\t\t因为 options.isShowLoading 为 true，再次调用 this.showLoadingFun() 方法。\r\n\t\t\t\t\t执行 showLoadingFun 方法：\r\n\t\t\t\t\t通过 uni.getStorageSync('isShowLoading') 获取本地存储的值，此时为 true，说明已有加载动画正在显示。\r\n\t\t\t\t\t执行 uni.hideLoading() 隐藏当前的加载动画，然后使用 uni.setStorageSync('isShowLoading', false) 将本地存储中的 isShowLoading 设置为 false。\r\n\t\t\t\t\t接着调用 uni.showLoading 显示新的加载动画，设置 title 为 “加载中...”。\r\n\t\t\t\t\tuni.showLoading 执行完成后，触发 complete 回调，在回调中使用 uni.setStorageSync('isShowLoading', true) 将本地存储中的 isShowLoading 再次设置为 true，表示新的加载动画正在显示。\r\n\t\t\t\t\t\r\n\t\t综上所述，在同时发起两个请求且 isShowLoading 都为 true 的情况下，会先显示第一个加载动画，当第二个请求发起时，会先隐藏第一个加载动画，再显示新的加载动画，始终保证页面上最多只有一个加载动画显示。\r\n\t*/\r\n\trequest(options = {\r\n\t\tisShowLoading: false\r\n\t}) {\r\n\t\t// 如果请求地址为空，则返回出去\r\n\t\tif (!options.url) return false\r\n\r\n\t\t// 如果参数中存在动画，则启用自定义动画\r\n\t\tif (options.isShowLoading) {\r\n\t\t\tthis.showLoadingFun()\r\n\t\t}\r\n\r\n\t\tuni.request({\r\n\t\t\turl: this.baseUrl + option.url,\r\n\t\t\tdata: option.data ? option.data : {},\r\n\t\t\theader: option.header ? option.header : {},\r\n\t\t\tmethod: option.method ? option.method : 'GET',\r\n\t\t\t// 请求成功\r\n\t\t\tsuccess: (response) => {\r\n\t\t\t\t// 关闭加载效果\r\n\t\t\t\tuni.hideLoading()\r\n\t\t\t\t// 后端返回数据异常\r\n\t\t\t\tif (response.data.code != 10000) {\r\n\t\t\t\t\t// 将失败结果返回出去\r\n\t\t\t\t\tif (option.fail && typeof option.fail == 'function') {\r\n\t\t\t\t\t\toption.fail(response)\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 将成功的结果返回\r\n\t\t\t\t\tif (option.success && typeof option.success == 'function') {\r\n\t\t\t\t\t\toption.success(response.data)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// 请求失败\r\n\t\t\tfail: response => {\r\n\t\t\t\t// 关闭加载效果\r\n\t\t\t\tuni.hideLoading()\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t// 封装加载动画函数，让页面中只存在一个loading的效果\r\n\tshowLoadingFun() {\r\n\t\t/*\r\n\t\t\t如果缓存中存在loading，则 1、隐藏加载动画 2、将缓存的值设置为false；\r\n\t\t\t不存在则为 1、不管成功失败都打开缓存的值 2、加载出错就将缓存的值设置为false\r\n\t\t*/\r\n\t\tconst isLoading = uni.getStorageSync('isShowLoading'); // 判断是否已经有加载动画在显示。\r\n\r\n\t\t// 如果已有加载动画，隐藏它并更新状态为 false\r\n\t\tif (isLoading) {\r\n\t\t\tuni.hideLoading()\r\n\t\t\tuni.setStorageSync('isShowLoading', false)\r\n\t\t}\r\n\r\n\t\t// 显示新的加载动画\r\n\t\tuni.showLoading({\r\n\t\t\ttitle: '加载中...',\r\n\t\t\tcomplete: () => {\r\n\t\t\t\t// 加载动画显示完成，标记状态为 true\r\n\t\t\t\tuni.setStorageSync('isShowLoading', true)\r\n\t\t\t},\r\n\t\t\tfail: () => {\r\n\t\t\t\t// 加载动画显示失败，标记状态为 false\r\n\t\t\t\tuni.setStorageSync('isShowLoading', false)\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\nexport default new Utils()"],"mappings":"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","ignoreList":[]}